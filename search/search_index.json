{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MLC \"script\" automation specification","text":"<p>Please check the MLC documentation for more details about the MLCflow interface.</p> <p>See the automatically generated catalog of all the MLC scripts.</p>"},{"location":"#understanding-mlc-scripts","title":"Understanding MLC scripts","text":"<ul> <li>An MLC script is identified by a set of tags and by an unique ID. </li> <li>Further each MLC script can have multiple variations and they are identified by variation tags which are treated in the same way as tags and identified by a <code>_</code> prefix.</li> </ul>"},{"location":"#mlc-script-execution-flow","title":"MLC script execution flow","text":"<pre><code>graph TD\n    MLC --&gt;|env = incoming env + env_from_meta| B[Script]\n    B --&gt;|env - local_env_keys| C[List of Dependencies]\n    C --&gt; D[Preprocess]\n    D --&gt;|env - local_env_keys| E[Prehook dependencies]\n    E --&gt;F[Run script]\n    F --&gt;|env - clean_env_keys_post_deps| G[Posthook dependencies]\n    G --&gt; H[Postprocess]\n    H --&gt;|env - clean_env_keys_post_deps| I[Post dependencies]\n    I --&gt;|\"env(new_env_keys)\"| J[Script return]</code></pre> <ul> <li>When an MLC script is invoked (either by tags or by unique ID), its <code>meta.yaml</code> is processed first which will check for any <code>deps</code> script and if there are, then they are executed in order.</li> <li>Once all the <code>deps</code> scripts are executed, <code>customize.py</code> file is checked and if existing <code>preprocess</code> function inside it is executed if present. </li> <li>Then any <code>prehook_deps</code>  scripts mentioned in <code>meta.yaml</code> are executed similar to <code>deps</code></li> <li>After this, keys in <code>env</code> dictionary is exported as <code>ENV</code> variables and <code>run</code> file if exists is executed.</li> <li>Once run file execution is done, any <code>posthook_deps</code> scripts mentioned in <code>meta.yaml</code> are executed similar to <code>deps</code></li> <li>Then <code>postprocess</code> function inside customize.py is executed if present.</li> <li>After this stage any <code>post_deps</code> scripts mentioned in <code>meta.yaml</code> is executed.</li> </ul> <p>** If a script is already cached, then the <code>preprocess</code>, <code>run file</code> and <code>postprocess</code> executions won't happen and only the dependencies marked as <code>dynamic</code> will be executed from <code>deps</code>, <code>prehook_deps</code>, <code>posthook_deps</code> and <code>postdeps</code>.</p>"},{"location":"#input-flags","title":"Input flags","text":"<p>When we run an MLC script we can also pass inputs to it and any input added in <code>input_mapping</code> dictionary inside <code>meta.yaml</code> gets converted to the corresponding <code>ENV</code> variable.</p>"},{"location":"#conditional-execution-of-any-deps-post_deps","title":"Conditional execution of any <code>deps</code>, <code>post_deps</code>","text":"<p>We can use <code>skip_if_env</code> dictionary inside any <code>deps</code>, <code>prehook_deps</code>, <code>posthook_deps</code> or <code>post_deps</code> to make its execution conditional</p>"},{"location":"#versions","title":"Versions","text":"<p>We can specify any specific version of a script using <code>version</code>. <code>version_max</code> and <code>version_min</code> are also possible options. </p> <ul> <li> <p>When <code>version_min</code> is given, any version above this if present in the cache or detected in the system can be chosen. If nothing is detected <code>default_version</code> if present and if above <code>version_min</code> will be used for installation. Otherwise <code>version_min</code> will be used as <code>version</code>.</p> </li> <li> <p>When <code>version_max</code> is given, any version below this if present in the cache or detected in the system can be chosen. If nothing is detected <code>default_version</code> if present and if below <code>version_max</code> will be used for installation. Otherwise <code>version_max_usable</code> (additional needed input for <code>version_max</code>) will be used as <code>version</code>.</p> </li> </ul>"},{"location":"#variations","title":"Variations","text":"<ul> <li>Variations are used to customize MLC script and each unique combination of variations uses a unique cache entry. Each variation can turn on <code>env</code> keys also any other meta including dependencies specific to it. Variations are turned on like tags but with a <code>_</code> prefix. For example, if a script is having tags <code>\"get,myscript\"</code>, to call the variation <code>\"test\"</code> inside it, we have to use tags <code>\"get,myscript,_test\"</code>. </li> </ul>"},{"location":"#variation-groups","title":"Variation groups","text":"<p><code>group</code> is a key to map variations into a group and at any time only one variation from a group can be used in the variation tags. For example, both <code>cpu</code> and <code>cuda</code> can be two variations under the <code>device</code> group, but user can at any time use either <code>cpu</code> or <code>cuda</code> as variation tags but not both.</p>"},{"location":"#dynamic-variations","title":"Dynamic variations","text":"<p>Sometimes it is difficult to add all variations needed for a script like say <code>batch_size</code> which can take many different values. To handle this case, we support dynamic variations using '#' where '#' can be dynamically replaced by any string. For example, <code>\"_batch_size.8\"</code> can be used as a tag to turn on the dynamic variation <code>\"_batch_size.#\"</code>.</p>"},{"location":"#env-flow-during-mlc-script-execution","title":"ENV flow during MLC script execution","text":"<ul> <li>During a given script execution incoming <code>env</code> dictionary is saved <code>(saved_env)</code> and all the updates happens on a copy of it.</li> <li>Once a script execution is over (which includes all the dependent script executions as well), newly created keys and any updated keys are merged with the <code>saved_env</code> provided the keys are mentioned in <code>new_env_keys</code></li> <li>Same behaviour applies to <code>state</code> dictionary.</li> </ul>"},{"location":"#special-env-keys","title":"Special env keys","text":"<ul> <li>Any env key with a prefix <code>MLC_TMP_*</code> and <code>MLC_GIT_*</code> are not passed by default to any dependency. These can be force passed by adding the key(s) to the <code>force_env_keys</code> list of the concerned dependency. </li> <li>Similarly we can avoid any env key from being passed to a given dependency by adding the prefix of the key in the <code>clean_env_keys</code> list of the concerned dependency.</li> <li><code>--input</code> is automatically converted to <code>MLC_INPUT</code> env key</li> <li><code>version</code> is converted to <code>MLC_VERSION</code>, <code>`version_min</code> to <code>MLC_VERSION_MIN</code> and <code>version_max</code> to <code>MLC_VERSION_MAX</code></li> <li>If <code>env['MLC_GH_TOKEN']=TOKEN_VALUE</code> is set then git URLs (specified by <code>MLC_GIT_URL</code>) are changed to add this token.</li> <li>If <code>env['MLC_GIT_SSH']=yes</code>, then git URLs are changed to SSH from HTTPS.</li> </ul>"},{"location":"#script-meta","title":"Script Meta","text":""},{"location":"#special-keys-in-script-meta","title":"Special keys in script meta","text":"<ul> <li>TBD: <code>reuse_version</code>, <code>inherit_variation_tags</code>, <code>update_env_tags_from_env</code></li> </ul>"},{"location":"#how-cache-works","title":"How cache works?","text":"<ul> <li>If <code>cache=true</code> is set in a script meta, the result of the script execution is cached for further use. </li> <li>For a cached script, <code>env</code> and <code>state</code> updates are done using <code>new_env</code> and <code>new_state</code> dictionaries which are stored in the <code>cm-cached.json</code> file inside the cached folder.</li> <li>By using <code>--new</code> input, a new cache entry can be forced even when an old one exist. </li> <li>By default no depndencies are run for a cached entry unless <code>dynamic</code> key is set for it. </li> </ul> <p>Please see here for trying MLC scripts.</p> <p>\u00a9 2022-25 MLCommons</p>"},{"location":"getting-started/","title":"Getting Started with MLC Script Automation","text":""},{"location":"getting-started/#install-mlc-scripts","title":"Install MLC Scripts","text":"<pre><code>pip install mlc-scripts\n</code></pre> <p>For more customized installation you can see here</p>"},{"location":"getting-started/#running-mlc-scripts","title":"Running MLC Scripts","text":"<p>To execute a simple script in MLC that captures OS details, use the following command:</p> <p><pre><code>mlcr detect,os -j\n</code></pre> * Here, <code>mlcr</code> is a shortform for <code>mlc run script --tags=</code></p> <p>This command gathers details about the system on which it's run, such as:</p> <pre><code>[2025-02-03 04:57:23,449 main.py:694 INFO] - Repos path for Index: /home/arjun/MLC/repos\n[2025-02-03 04:57:24,167 main.py:837 INFO] - Shared index for script saved to /home/arjun/MLC/repos/index_script.json.\n[2025-02-03 04:57:24,167 main.py:837 INFO] - Shared index for cache saved to /home/arjun/MLC/repos/index_cache.json.\n[2025-02-03 04:57:24,167 main.py:837 INFO] - Shared index for experiment saved to /home/arjun/MLC/repos/index_experiment.json.\n[2025-02-03 04:57:24,210 module.py:574 INFO] - * mlcr detect,os\n[2025-02-03 04:57:24,213 module.py:5354 INFO] -        ! cd /mnt/arjun/MLC/repos/gateoverflow@mlperf-automations\n[2025-02-03 04:57:24,213 module.py:5355 INFO] -        ! call /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os/run.sh from tmp-run.sh\n[2025-02-03 04:57:24,245 module.py:5501 INFO] -        ! call \"postprocess\" from /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os/customize.py\n[2025-02-03 04:57:24,254 module.py:2195 INFO] - {\n  \"return\": 0,\n  \"env\": {\n    \"MLC_HOST_OS_TYPE\": \"linux\",\n    \"MLC_HOST_OS_BITS\": \"64\",\n    \"MLC_HOST_OS_FLAVOR\": \"ubuntu\",\n    \"MLC_HOST_OS_FLAVOR_LIKE\": \"debian\",\n    \"MLC_HOST_OS_VERSION\": \"24.04\",\n    \"MLC_HOST_OS_KERNEL_VERSION\": \"6.8.0-52-generic\",\n    \"MLC_HOST_OS_GLIBC_VERSION\": \"2.39\",\n    \"MLC_HOST_OS_MACHINE\": \"x86_64\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER\": \"apt\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_INSTALL_CMD\": \"DEBIAN_FRONTEND=noninteractive apt-get install -y\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_UPDATE_CMD\": \"apt-get update -y\",\n    \"+MLC_HOST_OS_DEFAULT_LIBRARY_PATH\": [\n      \"/usr/local/lib/x86_64-linux-gnu\",\n      \"/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu64\",\n      \"/usr/local/lib64\",\n      \"/lib64\",\n      \"/usr/lib64\",\n      \"/usr/local/lib\",\n      \"/lib\",\n      \"/usr/lib\",\n      \"/usr/x86_64-linux-gnu/lib64\",\n      \"/usr/x86_64-linux-gnu/lib\"\n    ],\n    \"MLC_HOST_PLATFORM_FLAVOR\": \"x86_64\",\n    \"MLC_HOST_PYTHON_BITS\": \"64\",\n    \"MLC_HOST_SYSTEM_NAME\": \"arjun-spr\"\n  },\n  \"new_env\": {\n    \"MLC_HOST_OS_TYPE\": \"linux\",\n    \"MLC_HOST_OS_BITS\": \"64\",\n    \"MLC_HOST_OS_FLAVOR\": \"ubuntu\",\n    \"MLC_HOST_OS_FLAVOR_LIKE\": \"debian\",\n    \"MLC_HOST_OS_VERSION\": \"24.04\",\n    \"MLC_HOST_OS_KERNEL_VERSION\": \"6.8.0-52-generic\",\n    \"MLC_HOST_OS_GLIBC_VERSION\": \"2.39\",\n    \"MLC_HOST_OS_MACHINE\": \"x86_64\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER\": \"apt\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_INSTALL_CMD\": \"DEBIAN_FRONTEND=noninteractive apt-get install -y\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_UPDATE_CMD\": \"apt-get update -y\",\n    \"+MLC_HOST_OS_DEFAULT_LIBRARY_PATH\": [\n      \"/usr/local/lib/x86_64-linux-gnu\",\n      \"/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu64\",\n      \"/usr/local/lib64\",\n      \"/lib64\",\n      \"/usr/lib64\",\n      \"/usr/local/lib\",\n      \"/lib\",\n      \"/usr/lib\",\n      \"/usr/x86_64-linux-gnu/lib64\",\n      \"/usr/x86_64-linux-gnu/lib\"\n    ],\n    \"MLC_HOST_PLATFORM_FLAVOR\": \"x86_64\",\n    \"MLC_HOST_PYTHON_BITS\": \"64\",\n    \"MLC_HOST_SYSTEM_NAME\": \"arjun-spr\"\n  },\n  \"state\": {\n    \"os_uname_machine\": \"x86_64\",\n    \"os_uname_all\": \"Linux arjun-spr 6.8.0-52-generic #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\"\n  },\n  \"new_state\": {\n    \"os_uname_machine\": \"x86_64\",\n    \"os_uname_all\": \"Linux arjun-spr 6.8.0-52-generic #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\"\n  },\n  \"deps\": []\n}\n</code></pre> <p>For more details on MLC scripts, see the MLC documentation.</p> <p>You can also execute the script from Python as follows:</p>"}]}